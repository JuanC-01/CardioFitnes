CREATE OR REPLACE DATABASE CARDIOFITNESS;

USE CARDIOFITNESS;

CREATE TABLE EPS(
    IDEPS INT AUTO_INCREMENT PRIMARY KEY,
    NOMBREEPS VARCHAR(25) NOT NULL,
    ESTADOEPS ENUM('A', 'I')
) ENGINE=INNODB;

INSERT INTO EPS(IDEPS, NOMBREEPS, ESTADOEPS) VALUES
(1, 'SANITAS', 'A'),
(2, 'NUEVA EPS', 'A'),
(3, 'MEDIMAS', 'A'),
(4, 'ASMET SALUD', 'A'),
(5, 'POLICIA - MILITAR', 'A'),
(6, 'EMCOSALUD - TOLIHUILA', 'A');


CREATE TABLE HORARIO(
    IDHORARIO INT AUTO_INCREMENT PRIMARY KEY,
    NOMBREHORARIO VARCHAR(15) NOT NULL
) ENGINE=INNODB;

INSERT INTO HORARIO(IDHORARIO, NOMBREHORARIO) VALUES
(1, 'MAÑANA 1'),
(2, 'MAÑANA 2'),
(3, 'NOCHE 1'),
(4, 'NOCHE 2');

CREATE TABLE CLIENTE(
    CEDULA INT NOT NULL PRIMARY KEY,
    NOMBRES VARCHAR(40) NOT NULL,
    APELLIDOS VARCHAR(40) NOT NULL,
    FECHANTO DATE NOT NULL,
    EDAD INT NOT NULL DEFAULT 0,
    FK_IDEPS INT,
    FK_IDHORARIO INT,  
    TELEFONO VARCHAR(11),
    TALLA DOUBLE VARCHAR(50),
    IMAGENP VARCHAR(255),
    FOREIGN KEY (FK_IDEPS) REFERENCES EPS(IDEPS),
    FOREIGN KEY (FK_IDHORARIO) REFERENCES HORARIO(IDHORARIO)
)  ENGINE=INNODB;

CREATE TABLE RESGISTROPESO(
    IDPESO INT AUTO_INCREMENT PRIMARY KEY,
    FECHAPESO DATE DEFAULT CURDATE(),
    PESOKG DOUBLE NOT NULL,
    FK_CEDULA INT,
    FOREIGN KEY (FK_CEDULA) REFERENCES CLIENTE(CEDULA)
)  ENGINE=INNODB;

CREATE TABLE SERVICIO(
    IDSERVICIO INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRESERVICIO VARCHAR(25) NOT  NULL,
    PRECIOSERVICIO DOUBLE NOT NULL,
    ESTADOSERVICIO ENUM('A','I')
)ENGINE=INNODB;

INSERT INTO SERVICIO(NOMBRESERVICIO, PRECIOSERVICIO, ESTADOSERVICIO) VALUES
('MENSUALIDAD', 35000, 'A');

CREATE TABLE MENSUALIDAD(
    IDMENSUALIDAD INT AUTO_INCREMENT PRIMARY KEY,
    FECHAPAGO DATE,
    FECHAPROXIMO DATE,
    ESTADOMENSUALIDAD ENUM('P','D') NULL,
    FK_CEDULA INT,
    FK_IDSERVICIO INT,
    FOREIGN KEY (FK_CEDULA) REFERENCES CLIENTE(CEDULA),
    FOREIGN KEY (FK_IDSERVICIO) REFERENCES SERVICIO(IDSERVICIO)
)ENGINE=INNODB;

CREATE TABLE PRODUCTO(
    IDPRODUCTO INT AUTO_INCREMENT PRIMARY KEY,
    NOMBREPRODUCTO VARCHAR(35) NOT NULL,
    ESTADOPRODUCTO ENUM('A','I'),
    PRECIOPRODUCTO DOUBLE NOT NULL,
    CANTIDADPRODUCTO DOUBLE DEFAULT 0,
    IMAGENPR VARCHAR(255)
)ENGINE=INNODB;

CREATE TABLE VENTAPD(
    IDVENTAPD INT AUTO_INCREMENT PRIMARY KEY,
    FECHAVENTAPD DATE DEFAULT CURDATE(),
    CANTIDVADPD INT NOT NULL,
    FK_IDPRODUCTO INT,
    FOREIGN KEY (FK_IDPRODUCTO) REFERENCES PRODUCTO(IDPRODUCTO)
)ENGINE=INNODB;

CREATE TABLE COMPRAPD(
    IDCOMPRAPD INT AUTO_INCREMENT PRIMARY KEY,
    FECHACOMPRAPD DATE DEFAULT CURDATE(),
    CANTIDADCPD INT NOT NULL,
    FK_IDPRODUCTO INT,
    FOREIGN KEY (FK_IDPRODUCTO) REFERENCES PRODUCTO(IDPRODUCTO)
)ENGINE=INNODB;

CREATE TABLE AUDITORIA_PESO (
    IDAUDITORIA INT AUTO_INCREMENT PRIMARY KEY,
    IDPESO INT,
    FK_CEDULA INT,
    PESO_ANTERIOR DOUBLE,
    PESO_NUEVO DOUBLE,
    FECHA_MODIFICACION DATETIME,
    FOREIGN KEY (FK_CEDULA) REFERENCES CLIENTE(CEDULA)
);

----PROCEDIMIENTOSALMACENADOS
DELIMITER //
CREATE PROCEDURE REGISTRARCLIENTE(
    IN p_cedula INT,
    IN p_nombres VARCHAR(40),
    IN p_apellidos VARCHAR(40),
    IN p_fechanto DATE,
    IN p_fk_ideps INT,
    IN p_fk_idhorario INT,
    IN p_telefono VARCHAR(11),
    IN p_talla DOUBLE,
    IN p_imagenp VARCHAR(255)
)
BEGIN
    DECLARE cliente_existente INT;
    SELECT CEDULA INTO cliente_existente FROM CLIENTE WHERE CEDULA = p_cedula;
    IF cliente_existente IS NULL THEN
        INSERT INTO CLIENTE (CEDULA, NOMBRES, APELLIDOS, FECHANTO, FK_IDEPS, FK_IDHORARIO, TELEFONO, TALLA, IMAGENP)
        VALUES (p_cedula, p_nombres, p_apellidos, p_fechanto, p_fk_ideps, p_fk_idhorario, p_telefono, p_talla, p_imagenp);
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La cédula ya está registrada';
    END IF;
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REGISTROIMG(
    IN p_imagen BLOB,
    IN p_cedula INT
)
BEGIN
    DECLARE cliente_existente INT;

    SELECT CEDULA INTO cliente_existente FROM CLIENTE WHERE CEDULA = p_cedula;

    IF cliente_existente IS NOT NULL THEN
        INSERT INTO IMGPROFILE (IMAGEN, FK_IDCLIENTE)
        VALUES (p_imagen, p_cedula);
    ELSE
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El cliente no existe.';
    END IF;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REGISTRAREPS(
    IN p_nombre_eps VARCHAR(25),
    IN p_estado_eps ENUM('A', 'I')
)
BEGIN
    DECLARE eps_existente INT;
    SELECT COUNT(*) INTO eps_existente
    FROM EPS
    WHERE NOMBREEPS = p_nombre_eps;

    IF eps_existente > 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'La EPS ya existe';
    ELSE
        INSERT INTO EPS (NOMBREEPS, ESTADOEPS)
        VALUES (p_nombre_eps, p_estado_eps);
    END IF;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REGISTROPESO(
    IN _PESOKG DOUBLE,
    IN _FK_CEDULA INT
)
BEGIN
    INSERT INTO RESGISTROPESO (PESOKG, FK_CEDULA)
    VALUES (_PESOKG, _FK_CEDULA);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REGISTROSERVICIO (
    IN p_NombreServicio VARCHAR(25),
    IN p_PrecioServicio DOUBLE
)
BEGIN
    INSERT INTO SERVICIO (NOMBRESERVICIO, PRECIOSERVICIO, ESTADOSERVICIO)
    VALUES (p_NombreServicio, p_PrecioServicio, 'A');
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE REGISTROPRODUCTO (
    IN p_NombreProducto VARCHAR(35),
    IN p_PrecioProducto DOUBLE,
    IN p_imagenpr VARCHAR(255)
)
BEGIN
    INSERT INTO PRODUCTO (NOMBREPRODUCTO, ESTADOPRODUCTO, PRECIOPRODUCTO, IMAGENPR)
    VALUES (p_NombreProducto, 'A', p_PrecioProducto, p_imagenpr);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REGISTRARMENSUALIDAD(
    IN p_fecha_pago DATE,
    IN p_fk_cedula INT,
    IN p_fk_idservicio INT
)
BEGIN
    INSERT INTO MENSUALIDAD (FECHAPAGO, ESTADOMENSUALIDAD, FK_CEDULA, FK_IDSERVICIO)
    VALUES (p_fecha_pago, 'P', p_fk_cedula, p_fk_idservicio);

    UPDATE MENSUALIDAD
    SET ESTADOMENSUALIDAD = 'P'
    WHERE FK_CEDULA = p_fk_cedula 
      AND ESTADOMENSUALIDAD = 'D' 
      AND FECHAPAGO < p_fecha_pago;  
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE COMPRAPRODUCTO (
    IN p_CantidadCPD INT,
    IN p_FK_IDPRODUCTO INT
)
BEGIN
    INSERT INTO COMPRAPD (CANTIDADCPD, FK_IDPRODUCTO)
    VALUES (p_CantidadCPD, p_FK_IDPRODUCTO);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE RegistrarVenta (
    IN p_Cantidad INT,
    IN p_IdProducto INT
)
BEGIN
    DECLARE v_CantidadProducto INT;
    SELECT CANTIDADPRODUCTO INTO v_CantidadProducto 
    FROM PRODUCTO 
    WHERE IDPRODUCTO = p_IdProducto;

    IF v_CantidadProducto IS NULL THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Producto no encontrado.';
    ELSEIF v_CantidadProducto < p_Cantidad THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cantidad insuficiente en inventario.';
    ELSE
        -- Insertar la venta
        INSERT INTO VENTAPD (CANTIDVADPD, FK_IDPRODUCTO)
        VALUES (p_Cantidad, p_IdProducto);
    END IF;
END //
DELIMITER ;

----CONSULTAS
DELIMITER //
CREATE PROCEDURE CONSULTAEPS()
BEGIN
    SELECT IDEPS, NOMBREEPS
    FROM EPS
    WHERE ESTADOEPS = 'A';
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTAHORARIO()
BEGIN
    SELECT IDHORARIO, NOMBREHORARIO
    FROM HORARIO;
END//
DELIMITER ;
DELIMITER //
CREATE PROCEDURE CONSULTARTODOSCLIENTES()
BEGIN
    SELECT 
        C.CEDULA, C.NOMBRES, C.APELLIDOS,
        C.FECHANTO, C.EDAD, C.TELEFONO, 
        C.TALLA, C.IMAGENP, E.NOMBREEPS,
        H.NOMBREHORARIO,
        C.FK_IDEPS,           
        C.FK_IDHORARIO      
    FROM 
        CLIENTE C
    LEFT JOIN 
        EPS E ON C.FK_IDEPS = E.IDEPS
    LEFT JOIN 
        HORARIO H ON C.FK_IDHORARIO = H.IDHORARIO
    ORDER BY 
        C.NOMBRES ASC; 
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE CONSULTA_HISTORIAL_PESO(IN p_cedula INT, IN p_año INT)
BEGIN
    IF p_año IS NULL THEN
        SELECT 
            IDPESO AS idpeso,        
            YEAR(FECHAPESO) AS año,
            MONTH(FECHAPESO) AS mes,
            FECHAPESO AS fecha,
            PESOKG AS peso
        FROM 
            RESGISTROPESO
        WHERE 
            FK_CEDULA = p_cedula
        ORDER BY 
            FECHAPESO DESC
        LIMIT 12;  
    ELSE
        SELECT 
            IDPESO AS idpeso,       
            YEAR(FECHAPESO) AS año,
            MONTH(FECHAPESO) AS mes,
            FECHAPESO AS fecha,
            PESOKG AS peso
        FROM 
            RESGISTROPESO
        WHERE 
            FK_CEDULA = p_cedula AND YEAR(FECHAPESO) = p_año
        ORDER BY 
            FECHAPESO;  
    END IF;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTASERVICIO()
BEGIN
    SELECT IDSERVICIO, NOMBRESERVICIO, PRECIOSERVICIO
    FROM SERVICIO
    WHERE ESTADOSERVICIO = 'A';
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTAPRODUCTOS()
BEGIN
    SELECT IDPRODUCTO, NOMBREPRODUCTO, PRECIOPRODUCTO, CANTIDADPRODUCTO, IMAGENPR
    FROM PRODUCTO
    WHERE ESTADOPRODUCTO = 'A';
END//
DELIMITER ;

DELIMITER //
CREATE PROCEDURE CONSULTAMENSUALIDADULTIMA(IN clienteCedula INT)
BEGIN
    SELECT IDMENSUALIDAD, FECHAPAGO, FECHAPROXIMO, ESTADOMENSUALIDAD
    FROM MENSUALIDAD
    WHERE FK_CEDULA = clienteCedula 
      AND FECHAPAGO = (SELECT MAX(FECHAPAGO) FROM MENSUALIDAD WHERE FK_CEDULA = clienteCedula);
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REPORTEMENSUAIDADMES(
    IN p_fecha DATE
)
BEGIN
    DECLARE v_mes INT;
    DECLARE v_anio INT;
    DECLARE v_precio_servicio DOUBLE;

    SET v_mes = MONTH(p_fecha);
    SET v_anio = YEAR(p_fecha);

    SELECT S.PRECIOSERVICIO INTO v_precio_servicio
    FROM SERVICIO S
    WHERE S.IDSERVICIO = 1; 

    SELECT 
        COUNT(DISTINCT M.FK_CEDULA) AS NUM_CLIENTES,
        v_precio_servicio AS PRECIO_SERVICIO,
        COUNT(DISTINCT M.FK_CEDULA) * v_precio_servicio AS TOTAL_SERVICIO_MENSUAL
    FROM 
        MENSUALIDAD M
    WHERE 
        MONTH(M.FECHAPAGO) = v_mes
        AND YEAR(M.FECHAPAGO) = v_anio
        AND M.ESTADOMENSUALIDAD = 'P';
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE REPORTE_PDF(IN p_fecha DATE)
BEGIN
    DECLARE v_mes INT;
    DECLARE v_anio INT;
    DECLARE v_total_clientes INT;

    SET v_mes = MONTH(p_fecha);
    SET v_anio = YEAR(p_fecha);

    SELECT COUNT(DISTINCT M.FK_CEDULA) 
    INTO v_total_clientes
    FROM MENSUALIDAD M
    WHERE MONTH(M.FECHAPAGO) = v_mes
    AND YEAR(M.FECHAPAGO) = v_anio
    AND M.ESTADOMENSUALIDAD = 'P';

    SELECT 
        C.NOMBRES,
        C.APELLIDOS,
        M.FECHAPAGO,
        v_total_clientes * S.PRECIOSERVICIO AS TOTAL_SERVICIO_MENSUAL 
    FROM 
        CLIENTE C
    LEFT JOIN 
        MENSUALIDAD M ON C.CEDULA = M.FK_CEDULA
    LEFT JOIN 
        SERVICIO S ON M.FK_IDSERVICIO = S.IDSERVICIO
    WHERE 
        MONTH(M.FECHAPAGO) = v_mes
        AND YEAR(M.FECHAPAGO) = v_anio
        AND M.ESTADOMENSUALIDAD = 'P'
    GROUP BY 
        C.NOMBRES, C.APELLIDOS, M.FECHAPAGO, S.PRECIOSERVICIO
    ORDER BY 
        M.FECHAPAGO DESC;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE VENTASMES (
    IN p_fecha DATE
)
BEGIN 
    DECLARE v_mes INT;
    DECLARE v_anio INT;

    SET v_mes = MONTH(p_fecha);
    SET v_anio = YEAR(p_fecha);
    
    SELECT 
        SUM(v.CANTIDVADPD) AS TotalUnidadesVendidas,
        SUM(v.CANTIDVADPD * p.PRECIOPRODUCTO) AS TotalMonto
    FROM 
        VENTAPD v
    JOIN 
        PRODUCTO p ON v.FK_IDPRODUCTO = p.IDPRODUCTO
    WHERE 
        YEAR(v.FECHAVENTAPD) = v_anio 
        AND MONTH(v.FECHAVENTAPD) = v_mes;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE VENTAFETALLADO (
    IN p_fecha DATE
)
BEGIN 
    DECLARE v_mes INT;
    DECLARE v_anio INT;

    -- Obtener el mes y el año de la fecha proporcionada
    SET v_mes = MONTH(p_fecha);
    SET v_anio = YEAR(p_fecha);
    
    SELECT 
        p.NOMBREPRODUCTO,
        SUM(v.CANTIDVADPD) AS TotalVendido,
        SUM(v.CANTIDVADPD * p.PRECIOPRODUCTO) AS TotalMonto
    FROM 
        VENTAPD v
    JOIN 
        PRODUCTO p ON v.FK_IDPRODUCTO = p.IDPRODUCTO
    WHERE 
        YEAR(v.FECHAVENTAPD) = v_anio 
        AND MONTH(v.FECHAVENTAPD) = v_mes
    GROUP BY 
        p.IDPRODUCTO, p.NOMBREPRODUCTO;
END //
DELIMITER ;


---UPDATE
DELIMITER //
CREATE PROCEDURE ACTUALIZARCLIENTE(
    IN p_cedula INT,
    IN p_nombres VARCHAR(40),
    IN p_apellidos VARCHAR(40),
    IN p_fechanto DATE,
    IN p_telefono VARCHAR(11),
    IN p_idhorario INT,
    IN p_ideps INT,
    IN p_imagenp VARCHAR(255) 
)
BEGIN
    UPDATE CLIENTE
    SET 
        NOMBRES = p_nombres,
        APELLIDOS = p_apellidos,
        FECHANTO = p_fechanto,
        TELEFONO = p_telefono,
        FK_IDHORARIO = p_idhorario,
        FK_IDEPS = p_ideps,
        IMAGENP = p_imagenp 
    WHERE CEDULA = p_cedula;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE ACTUALIZARPESO(
    IN p_idpeso INT,
    IN p_nuevoPeso DOUBLE,
    IN p_fk_cedula INT 
)
BEGIN
    DECLARE cliente_existente INT;

    SELECT COUNT(*) INTO cliente_existente
    FROM RESGISTROPESO
    WHERE IDPESO = p_idpeso AND FK_CEDULA = p_fk_cedula;

    IF cliente_existente > 0 THEN
        UPDATE RESGISTROPESO
        SET PESOKG = p_nuevoPeso
        WHERE IDPESO = p_idpeso;
    ELSE
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Registro no encontrado o no pertenece al cliente especificado';
    END IF;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE ACTUALIZARPORDUCTO (
    IN p_idProducto INT,
    IN p_nombreProducto VARCHAR(35),
    IN p_precioProducto DOUBLE,
    IN p_imagenPr VARCHAR(255)
)
BEGIN
    UPDATE PRODUCTO
    SET 
        NOMBREPRODUCTO = p_nombreProducto,
        PRECIOPRODUCTO = p_precioProducto,
        IMAGENPR = p_imagenPr
    WHERE IDPRODUCTO = p_idProducto;
END //
DELIMITER ;

DELIMITER //
CREATE PROCEDURE ACTUALIZARSERVICIO (
    IN p_idServicio INT,
    IN p_nombreServicio VARCHAR(35),
    IN p_precioServicio DOUBLE
)
BEGIN
    UPDATE SERVICIO
    SET 
        NOMBRESERVICIO = p_nombreServicio,
        PRECIOSERVICIO = p_precioServicio
    WHERE IDSERVICIO = p_idServicio;
END //
DELIMITER ;

DELIMITER //

CREATE PROCEDURE UPDATECANTIDAD(
    IN p_idProducto INT,       -- ID del producto
    IN p_cantidad INT          -- Cantidad a sumar (puede ser negativa para restar)
)
BEGIN
    -- Actualiza la cantidad del producto
    UPDATE PRODUCTO
    SET CANTIDADPRODUCTO = CANTIDADPRODUCTO + p_cantidad
    WHERE IDPRODUCTO = p_idProducto;

    -- Asegúrate de no permitir cantidades negativas
    IF (SELECT CANTIDADPRODUCTO FROM PRODUCTO WHERE IDPRODUCTO = p_idProducto) < 0 THEN
        -- Reestablece la cantidad a 0 si se intentó restar más de lo que había
        UPDATE PRODUCTO
        SET CANTIDADPRODUCTO = 0
        WHERE IDPRODUCTO = p_idProducto;
    END IF;
END //

DELIMITER ;



---DELETE
DELIMITER //
CREATE PROCEDURE ELIMINARPESO(
    IN p_idpeso INT,
    IN p_fk_cedula INT
)
BEGIN
    DECLARE peso_existente INT;

    SELECT COUNT(*) INTO peso_existente
    FROM RESGISTROPESO
    WHERE IDPESO = p_idpeso AND FK_CEDULA = p_fk_cedula;

    IF peso_existente = 0 THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'El registro de peso no existe o no pertenece al cliente especificado';
    ELSE
        DELETE FROM RESGISTROPESO WHERE IDPESO = p_idpeso AND FK_CEDULA = p_fk_cedula;
    END IF;
END //
DELIMITER ;


----TRIGGERS

DELIMITER //
CREATE TRIGGER CALCULAREDAD
BEFORE INSERT ON CLIENTE
FOR EACH ROW
BEGIN
    DECLARE fecha_nacimiento DATE;
    DECLARE edad INT;
    SET fecha_nacimiento = NEW.FECHANTO;
    SET edad = YEAR(CURDATE()) - YEAR(fecha_nacimiento);
    IF (MONTH(CURDATE()) < MONTH(fecha_nacimiento) OR
        (MONTH(CURDATE()) = MONTH(fecha_nacimiento) AND DAY(CURDATE()) < DAY(fecha_nacimiento))) THEN
        SET edad = edad - 1;
    END IF;
    SET NEW.EDAD = edad;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER CALCULAREDADUPDATE
BEFORE UPDATE ON CLIENTE
FOR EACH ROW
BEGIN
    DECLARE fecha_nacimiento DATE;
    DECLARE edad INT;
    SET fecha_nacimiento = NEW.FECHANTO;
    SET edad = YEAR(CURDATE()) - YEAR(fecha_nacimiento);
    IF (MONTH(CURDATE()) < MONTH(fecha_nacimiento) OR
        (MONTH(CURDATE()) = MONTH(fecha_nacimiento) AND DAY(CURDATE()) < DAY(fecha_nacimiento))) THEN
        SET edad = edad - 1;
    END IF;
    SET NEW.EDAD = edad;
END;
//
DELIMITER ;

DELIMITER //
CREATE TRIGGER TRG_AUDITORIA_PESO
AFTER UPDATE ON RESGISTROPESO
FOR EACH ROW
BEGIN
    INSERT INTO AUDITORIA_PESO (IDPESO, FK_CEDULA, PESO_ANTERIOR, PESO_NUEVO, FECHA_MODIFICACION)
    VALUES (OLD.IDPESO, OLD.FK_CEDULA, OLD.PESOKG, NEW.PESOKG, NOW());
END //
DELIMITER ;

DELIMITER //
CREATE TRIGGER TG_FECHAPROX
BEFORE INSERT ON MENSUALIDAD
FOR EACH ROW
BEGIN
    IF NEW.FECHAPAGO IS NOT NULL THEN
        SET NEW.FECHAPROXIMO = DATE_ADD(NEW.FECHAPAGO, INTERVAL 1 MONTH);
    END IF;
END //
DELIMITER ;
SET GLOBAL event_scheduler = ON;


DELIMITER //
CREATE EVENT UPDATE_ESTADOMENSUALIDAD
ON SCHEDULE EVERY 1 MINUTE
DO
BEGIN
    -- Actualiza el estado a 'D' solo si la fecha actual es mayor que la fecha de pago y el estado actual es 'P'
    UPDATE MENSUALIDAD
    SET ESTADOMENSUALIDAD = 'D'
    WHERE CURDATE() > FECHAPROXIMO AND ESTADOMENSUALIDAD = 'P';
END; //
DELIMITER ;

DELIMITER //

CREATE TRIGGER after_insert_compra
AFTER INSERT ON COMPRAPD
FOR EACH ROW
BEGIN
    UPDATE PRODUCTO
    SET CANTIDADPRODUCTO = CANTIDADPRODUCTO + NEW.CANTIDADCPD
    WHERE IDPRODUCTO = NEW.FK_IDPRODUCTO;
END; //
DELIMITER ;

DELIMITER //
CREATE TRIGGER actualizar_cantidad_producto 
AFTER INSERT ON VENTAPD
FOR EACH ROW
BEGIN
    UPDATE PRODUCTO 
    SET CANTIDADPRODUCTO = CANTIDADPRODUCTO - NEW.CANTIDVADPD
    WHERE IDPRODUCTO = NEW.FK_IDPRODUCTO;
END; //
DELIMITER ;




